// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package l3afdconfig

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// L3AfConfiguratorClient is the client API for L3AfConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type L3AfConfiguratorClient interface {
	UpdateConfig(ctx context.Context, in *L3AfdConfigRequest, opts ...grpc.CallOption) (*L3AfdConfigResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type l3AfConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewL3AfConfiguratorClient(cc grpc.ClientConnInterface) L3AfConfiguratorClient {
	return &l3AfConfiguratorClient{cc}
}

func (c *l3AfConfiguratorClient) UpdateConfig(ctx context.Context, in *L3AfdConfigRequest, opts ...grpc.CallOption) (*L3AfdConfigResponse, error) {
	out := new(L3AfdConfigResponse)
	err := c.cc.Invoke(ctx, "/v1.l3afdconfig.L3afConfigurator/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l3AfConfiguratorClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/v1.l3afdconfig.L3afConfigurator/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// L3AfConfiguratorServer is the server API for L3AfConfigurator service.
// All implementations must embed UnimplementedL3AfConfiguratorServer
// for forward compatibility
type L3AfConfiguratorServer interface {
	UpdateConfig(context.Context, *L3AfdConfigRequest) (*L3AfdConfigResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedL3AfConfiguratorServer()
}

// UnimplementedL3AfConfiguratorServer must be embedded to have forward compatible implementations.
type UnimplementedL3AfConfiguratorServer struct {
}

func (UnimplementedL3AfConfiguratorServer) UpdateConfig(context.Context, *L3AfdConfigRequest) (*L3AfdConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedL3AfConfiguratorServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedL3AfConfiguratorServer) mustEmbedUnimplementedL3AfConfiguratorServer() {}

// UnsafeL3AfConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to L3AfConfiguratorServer will
// result in compilation errors.
type UnsafeL3AfConfiguratorServer interface {
	mustEmbedUnimplementedL3AfConfiguratorServer()
}

func RegisterL3AfConfiguratorServer(s grpc.ServiceRegistrar, srv L3AfConfiguratorServer) {
	s.RegisterService(&L3AfConfigurator_ServiceDesc, srv)
}

func _L3AfConfigurator_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(L3AfdConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L3AfConfiguratorServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.l3afdconfig.L3afConfigurator/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L3AfConfiguratorServer).UpdateConfig(ctx, req.(*L3AfdConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L3AfConfigurator_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L3AfConfiguratorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.l3afdconfig.L3afConfigurator/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L3AfConfiguratorServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// L3AfConfigurator_ServiceDesc is the grpc.ServiceDesc for L3AfConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var L3AfConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.l3afdconfig.L3afConfigurator",
	HandlerType: (*L3AfConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _L3AfConfigurator_UpdateConfig_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _L3AfConfigurator_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/l3afdconfig/l3afdconfig_service.proto",
}
